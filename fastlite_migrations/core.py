"""Core migrator code"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Migrator']

# %% ../nbs/00_core.ipynb 3
from fastlite import *

# %% ../nbs/00_core.ipynb 6
class Migrator():
    def __init__(self, db):
        self.migrations, self.rollbacks, self.db = dict(), dict(), db
        db.execute("""
        CREATE TABLE IF NOT EXISTS migrations (
            id INTEGER PRIMARY KEY, name TEXT, inserted_at TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL
        ) STRICT;
        """)
        self.Migration = db.t.migrations.dataclass()
        self.db_migrations = db.t.migrations

# %% ../nbs/00_core.ipynb 9
@patch
def add_migration(self: Migrator, migration_id:int):
    assert type(migration_id) is int, "migration_id must be an integer"
    def decorator(migration:callable):
        assert callable(migration), "migration must be a callable"
        self.migrations[migration_id] = migration
    return decorator

@patch
def add_rollback(self: Migrator, rollback_id:int):
    assert type(rollback_id) is int, "rollback_id must be an integer"
    def decorator(rollback:callable):
        assert callable(rollback), "migration must be a callable"
        self.rollbacks[rollback_id] = rollback
    return decorator

# %% ../nbs/00_core.ipynb 10
@patch
def migrate(self: Migrator):
    # TODO: make sure ids are in sequence
    for id, migration in sorted(self.migrations.items()):
        if id in self.db.t.migrations:
            continue
        print(id, migration.__name__)
        self.db_migrations.insert(self.Migration(id=id, name=migration.__name__))
        migration(self.db)

# %% ../nbs/00_core.ipynb 11
@patch
def last_applied_migration(self: Migrator):
    return self.db_migrations('id = (SELECT MAX(id) FROM migrations)')[0]

# %% ../nbs/00_core.ipynb 12
@patch
def applied_migrations(self: Migrator):
    return self.db_migrations()

# %% ../nbs/00_core.ipynb 13
@patch
def rollback(self: Migrator):
    latest_migration = self.last_applied_migration()
    last_id = latest_migration.id
    if last_id not in self.rollbacks:
        print(f"No rollback for the latest applied migration found: {latest_migration}")
        return

    rollback = self.rollbacks[last_id]
    print(last_id, rollback.__name__)

    rollback(self.db)
    self.db_migrations.delete(last_id)
